{"ast":null,"code":"import React from 'react';\n\nclass Api extends React.Component {\n  constructor(options) {\n    super(options);\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getCards() {\n    return fetch(`${this.baseUrl}` + '/cards', {\n      headers: this.headers\n    }).then(this._getResponseData);\n  }\n\n  createCard(inputValues) {\n    return fetch(`${this.baseUrl}` + '/cards', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: inputValues.title,\n        link: inputValues.link\n      })\n    }).then(this._getResponseData);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.baseUrl}` + '/cards/' + `${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(this._getResponseData);\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this.headers\n    }).then(this._getResponseData);\n  } // putLike(cardId) {\n  //     return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\n  //         method: 'PUT',\n  //         headers: this.headers,\n  //     })\n  //         .then(this._getResponseData)\n  // }\n  // deleteLike(cardId) {\n  //     return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\n  //         method: 'DELETE',\n  //         headers: this.headers,\n  //     })\n  //         .then(this._getResponseData)\n  // }\n\n\n  getUserInfo() {\n    return fetch(`${this.baseUrl}` + '/users/me', {\n      headers: this.headers\n    }).then(this._getResponseData);\n  }\n\n  editUserInfo(inputValues) {\n    return fetch(`${this.baseUrl}` + '/users/me', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: inputValues.name,\n        about: inputValues.about\n      })\n    }).then(this._getResponseData);\n  }\n\n  editAvatar(inputValues) {\n    return fetch(`${this.baseUrl}` + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: inputValues.link\n      })\n    }).then(this._getResponseData);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-24',\n  headers: {\n    authorization: 'be14df10-ef56-405e-9870-1c2d83310783',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/svyat/dev/mesto-react/src/utils/api.js"],"names":["React","Api","Component","constructor","options","baseUrl","headers","_getResponseData","res","ok","json","Promise","reject","status","getCards","fetch","then","createCard","inputValues","method","body","JSON","stringify","name","title","link","deleteCard","cardId","changeLikeCardStatus","isLiked","getUserInfo","editUserInfo","about","editAvatar","avatar","api","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AAEA,SAAKC,OAAL,GAAeD,OAAO,CAACC,OAAvB;AACA,SAAKC,OAAL,GAAeF,OAAO,CAACE,OAAvB;AACH;;AAEDC,EAAAA,gBAAgB,CAACC,GAAD,EAAM;AAClB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,WAAOC,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,QAArB,EAA+B;AACvCC,MAAAA,OAAO,EAAE,KAAKA;AADyB,KAA/B,CAAL,CAGFU,IAHE,CAGG,KAAKT,gBAHR,CAAP;AAIH;;AAEDU,EAAAA,UAAU,CAACC,WAAD,EAAc;AACpB,WAAOH,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,QAArB,EAA+B;AACvCc,MAAAA,MAAM,EAAE,MAD+B;AAEvCb,MAAAA,OAAO,EAAE,KAAKA,OAFyB;AAGvCc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEL,WAAW,CAACM,KADD;AAEjBC,QAAAA,IAAI,EAAEP,WAAW,CAACO;AAFD,OAAf;AAHiC,KAA/B,CAAL,CAQFT,IARE,CAQG,KAAKT,gBARR,CAAP;AASH;;AAEDmB,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,WAAOZ,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,SAApB,GAAiC,GAAEsB,MAAO,EAA3C,EAA8C;AACtDR,MAAAA,MAAM,EAAE,QAD8C;AAEtDb,MAAAA,OAAO,EAAE,KAAKA;AAFwC,KAA9C,CAAL,CAIFU,IAJE,CAIG,KAAKT,gBAJR,CAAP;AAKH;;AAGDqB,EAAAA,oBAAoB,CAACD,MAAD,EAASE,OAAT,EAAkB;AAClC,WAAOd,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,eAApB,GAAuC,GAAEsB,MAAO,EAAjD,EAAoD;AAC5DR,MAAAA,MAAM,EAAG,GAAEU,OAAO,GAAG,KAAH,GAAW,QAAS,EADsB;AAE5DvB,MAAAA,OAAO,EAAE,KAAKA;AAF8C,KAApD,CAAL,CAIFU,IAJE,CAIG,KAAKT,gBAJR,CAAP;AAKH,GAjD6B,CAoD9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAuB,EAAAA,WAAW,GAAG;AACV,WAAOf,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,WAArB,EAAkC;AAC1CC,MAAAA,OAAO,EAAE,KAAKA;AAD4B,KAAlC,CAAL,CAGFU,IAHE,CAGG,KAAKT,gBAHR,CAAP;AAIH;;AAEDwB,EAAAA,YAAY,CAACb,WAAD,EAAc;AACtB,WAAOH,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,WAArB,EAAkC;AAC1Cc,MAAAA,MAAM,EAAE,OADkC;AAE1Cb,MAAAA,OAAO,EAAE,KAAKA,OAF4B;AAG1Cc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEL,WAAW,CAACK,IADD;AAEjBS,QAAAA,KAAK,EAAEd,WAAW,CAACc;AAFF,OAAf;AAHoC,KAAlC,CAAL,CAQFhB,IARE,CAQG,KAAKT,gBARR,CAAP;AASH;;AAED0B,EAAAA,UAAU,CAACf,WAAD,EAAc;AACpB,WAAOH,KAAK,CAAE,GAAE,KAAKV,OAAQ,EAAhB,GAAoB,kBAArB,EAAyC;AACjDc,MAAAA,MAAM,EAAE,OADyC;AAEjDb,MAAAA,OAAO,EAAE,KAAKA,OAFmC;AAGjDc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBY,QAAAA,MAAM,EAAEhB,WAAW,CAACO;AADH,OAAf;AAH2C,KAAzC,CAAL,CAOFT,IAPE,CAOG,KAAKT,gBAPR,CAAP;AAQH;;AAhG6B;;AAoGlC,MAAM4B,GAAG,GAAG,IAAIlC,GAAJ,CAAQ;AAChBI,EAAAA,OAAO,EAAE,6CADO;AAEhBC,EAAAA,OAAO,EAAE;AACL8B,IAAAA,aAAa,EAAE,sCADV;AAEL,oBAAgB;AAFX;AAFO,CAAR,CAAZ;AAQA,eAAeD,GAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Api extends React.Component {\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this.baseUrl = options.baseUrl;\r\n        this.headers = options.headers;\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    getCards() {\r\n        return fetch(`${this.baseUrl}` + '/cards', {\r\n            headers: this.headers,\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n    createCard(inputValues) {\r\n        return fetch(`${this.baseUrl}` + '/cards', {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: inputValues.title,\r\n                link: inputValues.link\r\n            })\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this.baseUrl}` + '/cards/' + `${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n\r\n    changeLikeCardStatus(cardId, isLiked) {\r\n        return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\r\n            method: `${isLiked ? 'PUT' : 'DELETE'}`,\r\n            headers: this.headers\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n\r\n    // putLike(cardId) {\r\n    //     return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\r\n    //         method: 'PUT',\r\n    //         headers: this.headers,\r\n    //     })\r\n    //         .then(this._getResponseData)\r\n    // }\r\n\r\n    // deleteLike(cardId) {\r\n    //     return fetch(`${this.baseUrl}` + '/cards/likes/' + `${cardId}`, {\r\n    //         method: 'DELETE',\r\n    //         headers: this.headers,\r\n    //     })\r\n    //         .then(this._getResponseData)\r\n    // }\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this.baseUrl}` + '/users/me', {\r\n            headers: this.headers\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n    editUserInfo(inputValues) {\r\n        return fetch(`${this.baseUrl}` + '/users/me', {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: inputValues.name,\r\n                about: inputValues.about,\r\n            })\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n    editAvatar(inputValues) {\r\n        return fetch(`${this.baseUrl}` + '/users/me/avatar', {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                avatar: inputValues.link\r\n            })\r\n        })\r\n            .then(this._getResponseData)\r\n    }\r\n\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-24',\r\n    headers: {\r\n        authorization: 'be14df10-ef56-405e-9870-1c2d83310783',\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default api;"]},"metadata":{},"sourceType":"module"}